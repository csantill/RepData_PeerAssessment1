find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
find_rtools()
install.packages("slidify")
rm(list=ls())
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
quit
0
skip()
quit()
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
libray(xlsx)
librar(xlsx)
library(xlsx)
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
library(xlsx)
install.packages('RMySQL',type='source')
R.home()
sessionInfo()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "c0bc4aaa91caa5a79ef0")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
myapp <- oauth_app("github", key = "c0bc4aaa91caa5a79ef0", secret="0637266f3efc899f98c43d1e772dfbd484a7f6b8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
install.packages("jsonlite")
X<- matrix (c(89.7921.71.5184,94,8836,69,4761), nrows =4, ncols=2)
X<- matrix (c(89,7921,71.5184,94,8836,69,4761), nrows =4, ncols=2)
X<- matrix (c(89,7921,71.5184,94,8836,69,4761), nrow =4, ncol=2)
X<- matrix (c(89,7921,71,5184,94,8836,69,4761), nrow =4, ncol=2)
X\
X
Y<- matrix(c(96,71,87,78,nrow=1))
Y
Y<- matrix(c(96,71,87,78),nrow=1))
Y<- matrix(c(96,71,87,78),nrow=1)
Y
Y<- matrix(c(96,71,87,78),ncol=1)
Y
X<- matrix (c(1,89,7921,1,71,5184,1,94,8836,1,69,4761), nrow =5, ncol=2)
X<- matrix (c(1,89,7921,1,71,5184,1,94,8836,1,69,4761), nrow =4)
X
X
X<- matrix (c(1,1,1,189,,72,94,69,7921,1,71,7921,5184,8836,4761)nrow =4)
X<- matrix (c(1,1,1,189,,72,94,69,7921,1,71,7921,5184,8836,4761),nrow =4)
X<- matrix (c(1,1,1,1,89,72,94,69,7921,5184,8836,4761),nrow =4)
X
library(swirl)
install_from_swirl("Exploratory_Data_Analysis")
rm(list=ls())
swirl()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(lattice)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
stepsNewByDay$Weekend <- as.factor(weekdays(stepsNewByDay) %in% c("Saturday","Sunday"), 1,0)
stepsNewByDay$Weekend <- as.factor(ifelse(weekdays(stepsNewByDay) %in% c("Saturday","Sunday"), 1,0))
stepsNewByDay$Weekend <- as.factor(ifelse(weekdays(stepsNewByDay$Date) %in% c("Saturday","Sunday"), 1,0))
stepsWeekend <- stepsNewByDay[stepsNewByDay$Weekend=="Weekend"]
stepsWeekday <- stepsNewByDay[stepsNewByDay$Weekend=="Weekday"]
stepsNewByDay$Weekend <- as.factor(ifelse(weekdays(stepsNewByDay) %in% c("Saturday","Sunday"), "Weekend","WeekDay"))
stepsNewByDay$Weekend <- as.factor(ifelse(weekdays(stepsNewByDay$Date) %in% c("Saturday","Sunday"), "Weekend","WeekDay"))
stepsWeekend <- stepsNewByDay[stepsNewByDay$Weekend=="Weekend"]
stepsWeekday <- stepsNewByDay[stepsNewByDay$Weekend=="Weekday"]
stepsWeekend <- stepsNewByDay[stepsNewByDay$Weekend=="Weekend"]
stepsWeekend <- stepsNewByDay[stepsNewByDay$Weekend=="Weekend",]
str(stepsWeekend)
View(stepsWeekend)
plot(stepsWeekday$Interval,  type = "l", main = "Comparison of the Average Number of Steps\n between Weekdays and the Weekend",
xlab = "Interval", ylab = "Number of Steps")
lines(stepsWeekend$Interval, col = "red")
legend("topright", c("Weekday", "Weekend"), col = c("black", "red"), lty = 1)
plot(names(meanStepsInterval),stepsWeekday$Interval,  type = "l", main = "Comparison of the Average Number of Steps\n between Weekdays and the Weekend",
xlab = "Interval", ylab = "Number of Steps")
lines(stepsWeekend$Interval, col = "red")
legend("topright", c("Weekday", "Weekend"), col = c("black", "red"), lty = 1)
plot(names(meanStepsInterval),stepsWeekday$Interval,  type = "l", main = "Comparison of the Average Number of Steps\n between Weekdays and the Weekend",
xlab = "Interval", ylab = "Number of Steps")
lines(stepsWeekend$Interval, col = "red")
legend("topright", c("Weekday", "Weekend"), col = c("black", "red"), lty = 1)
intervalsplit <- split(stepData$Steps,stepData$Interval)
meanStepsInterval <- sapply(intervalsplit, mean,na.rm=TRUE)
plot(names(meanStepsInterval), meanStepsInterval , type = "l",
main = "Mean steps per interval for all days",  xlab = "Interval", ylab = "Mean # of steps "  )
str(meanStepsInterval)
weekendStepData <- stepData[weekdays(stepData$Date) %in% c("Saturday","Sunday"), ]
weekendintervalsplit <- split(weekendStepData$Steps,weekendStepData$Interval)
meanStepsInterval <- sapply(weekendintervalsplit, mean,na.rm=TRUE)
plot(names(weekendintervalsplit), weekendintervalsplit , type = "l",
main = "Mean steps per interval for all days",  xlab = "Interval", ylab = "Mean # of steps "  )
weekendStepData <- stepData[weekdays(stepData$Date) %in% c("Saturday","Sunday"), ]
main = "Mean steps per interval for all days",  xlab = "Interval", ylab = "Mean # of steps "  )
weekendStepData <- stepData[weekdays(stepData$Date) %in% c("Saturday","Sunday"), ]
str(weekendStepData)
weekendintervalsplit <- split(weekendStepData$Steps,weekendStepData$Interval)
meanStepsInterval <- sapply(weekendintervalsplit, mean,na.rm=TRUE)
plot(names(weekendintervalsplit), weekendintervalsplit , type = "l",
main = "Mean steps per interval for all days",  xlab = "Interval", ylab = "Mean # of steps "  )
names(weekendintervalsplit)
str(weekendStepData)
View(weekendStepData)
unique(weekendStepData$Date)
weekendStepData <- stepData[weekdays(stepData$Date) %in% c("Saturday","Sunday"), ]
weekendintervalsplit <- split(weekendStepData$Steps,weekendStepData$Interval)
meanStepsInterval <- sapply(weekendintervalsplit, mean,na.rm=TRUE)
plot(names(weekendintervalsplit), weekendintervalsplit , type = "l",
main = "Mean steps per interval for all days",  xlab = "Interval", ylab = "Mean # of steps "  )
weekendStepData <- stepData[weekdays(stepData$Date) %in% c("Saturday","Sunday"), ]
weekendintervalsplit <- split(weekendStepData$Steps,weekendStepData$Interval)
weekendmeanStepsInterval <- sapply(weekendintervalsplit, mean,na.rm=TRUE)
plot(names(weekendintervalsplit), weekendmeanStepsInterval , type = "l",
main = "Mean steps per interval for all days",  xlab = "Interval", ylab = "Mean # of steps "  )
weekdayStepData <- stepData[!(weekdays(stepData$Date) %in% c("Saturday","Sunday")), ]
weekdayintervalsplit <- split(weekdayStepData$Steps,weekdayStepData$Interval)
weekdaymeanStepsInterval <- sapply(weekdayintervalsplit, mean,na.rm=TRUE)
weekendStepData <- stepData[weekdays(stepData$Date) %in% c("Saturday","Sunday"), ]
weekendintervalsplit <- split(weekendStepData$Steps,weekendStepData$Interval)
weekendmeanStepsInterval <- sapply(weekendintervalsplit, mean,na.rm=TRUE)
weekdayStepData <- stepData[!(weekdays(stepData$Date) %in% c("Saturday","Sunday")), ]
weekdayintervalsplit <- split(weekdayStepData$Steps,weekdayStepData$Interval)
weekdaymeanStepsInterval <- sapply(weekdayintervalsplit, mean,na.rm=TRUE)
plot(names(weekendintervalsplit), weekendmeanStepsInterval , type = "l",
main = "Mean steps per interval comparison weekends and Weekdays",  xlab = "Interval", ylab = "Mean # of steps "  )
lines(names(weekdayStepData),weekdaymeanStepsInterval,col="red")
weekdaymeanStepsInterval
plot(names(weekendintervalsplit), weekendmeanStepsInterval , type = "l",
main = "Mean steps per interval comparison weekends and Weekdays",  xlab = "Interval", ylab = "Mean # of steps "  )
lines(names(weekendintervalsplit),weekendmeanStepsInterval,col="red")
legend("topright", c("Weekday", "Weekend"), col = c("black", "red"), lty = 1)
plot(names(weekendintervalsplit), weekendmeanStepsInterval , type = "l",
main = "Mean steps per interval comparison weekends and Weekdays",  xlab = "Interval", ylab = "Mean # of steps "  )
plot(names(weekdayintervalsplit), weekdaymeanStepsInterval , type = "l",
main = "Mean steps per interval comparison weekends and Weekdays",  xlab = "Interval", ylab = "Mean # of steps "  )
lines(names(weekendintervalsplit),weekendmeanStepsInterval,col="red")
legend("topright", c("Weekday", "Weekend"), col = c("black", "red"), lty = 1)
weekendStepData <- stepData[weekdays(stepData$Date) %in% c("Saturday","Sunday"), ]
weekendintervalsplit <- split(weekendStepData$Steps,weekendStepData$Interval)
weekendmeanStepsInterval <- sapply(weekendintervalsplit, mean,na.rm=TRUE)
weekdayStepData <- stepData[!(weekdays(stepData$Date) %in% c("Saturday","Sunday")), ]
weekdayintervalsplit <- split(weekdayStepData$Steps,weekdayStepData$Interval)
weekdaymeanStepsInterval <- sapply(weekdayintervalsplit, mean,na.rm=TRUE)
plot(names(weekdayintervalsplit), weekdaymeanStepsInterval , type = "l",
main = "Mean steps per interval comparison weekends and Weekdays",  xlab = "Interval", ylab = "Mean # of steps "  )
lines(names(weekdayStepData),weekdaymeanStepsInterval,col="red")
legend("topright", c("Weekday", "Weekend"), col = c("black", "red"), lty = 1)
plot(names(weekdayintervalsplit), weekdaymeanStepsInterval , type = "l",
main = "Mean steps per interval comparison weekends and Weekdays",  xlab = "Interval", ylab = "Mean # of steps "  )
lines(names(weekendintervalsplit),weekendmeanStepsInterval,col="red")
legend("topright", c("Weekday", "Weekend"), col = c("black", "red"), lty = 1)
weekendStepData <- stepData[weekdays(stepData$Date) %in% c("Saturday","Sunday"), ]
weekendintervalsplit <- split(weekendStepData$Steps,weekendStepData$Interval)
weekendmeanStepsInterval <- sapply(weekendintervalsplit, mean,na.rm=TRUE)
weekdayStepData <- stepData[!(weekdays(stepData$Date) %in% c("Saturday","Sunday")), ]
weekdayintervalsplit <- split(weekdayStepData$Steps,weekdayStepData$Interval)
weekdaymeanStepsInterval <- sapply(weekdayintervalsplit, mean,na.rm=TRUE)
plot(names(weekdayintervalsplit), weekdaymeanStepsInterval , type = "l",
main = "Mean steps per interval comparison weekends and Weekdays",  xlab = "Interval", ylab = "Mean # of steps "  )
lines(names(weekdayStepData),weekdaymeanStepsInterval,col="red")
plot(names(weekdayintervalsplit), weekdaymeanStepsInterval , type = "l",
main = "Mean steps per interval comparison weekends and Weekdays",  xlab = "Interval", ylab = "Mean # of steps "  )
lines(names(weekendintervalsplit),weekendmeanStepsInterval,col="red")
legend("topright", c("Weekday", "Weekend"), col = c("black", "red"), lty = 1)
plot(names(weekdayintervalsplit), weekdaymeanStepsInterval , type = "l",
main = "Mean steps per interval comparison weekends and Weekdays",  xlab = "Interval", ylab = "Mean # of steps "  )
lines(names(weekendintervalsplit),weekendmeanStepsInterval,col="red")
legend("topright", c("Weekday", "Weekend"), col = c("black", "red"), lty = 1)
