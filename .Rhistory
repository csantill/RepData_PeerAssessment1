find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
find_rtools()
install.packages("slidify")
rm(list=ls())
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
quit
0
skip()
quit()
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
libray(xlsx)
librar(xlsx)
library(xlsx)
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
library(xlsx)
install.packages('RMySQL',type='source')
R.home()
sessionInfo()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "c0bc4aaa91caa5a79ef0")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
myapp <- oauth_app("github", key = "c0bc4aaa91caa5a79ef0", secret="0637266f3efc899f98c43d1e772dfbd484a7f6b8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
install.packages("jsonlite")
X<- matrix (c(89.7921.71.5184,94,8836,69,4761), nrows =4, ncols=2)
X<- matrix (c(89,7921,71.5184,94,8836,69,4761), nrows =4, ncols=2)
X<- matrix (c(89,7921,71.5184,94,8836,69,4761), nrow =4, ncol=2)
X<- matrix (c(89,7921,71,5184,94,8836,69,4761), nrow =4, ncol=2)
X\
X
Y<- matrix(c(96,71,87,78,nrow=1))
Y
Y<- matrix(c(96,71,87,78),nrow=1))
Y<- matrix(c(96,71,87,78),nrow=1)
Y
Y<- matrix(c(96,71,87,78),ncol=1)
Y
X<- matrix (c(1,89,7921,1,71,5184,1,94,8836,1,69,4761), nrow =5, ncol=2)
X<- matrix (c(1,89,7921,1,71,5184,1,94,8836,1,69,4761), nrow =4)
X
X
X<- matrix (c(1,1,1,189,,72,94,69,7921,1,71,7921,5184,8836,4761)nrow =4)
X<- matrix (c(1,1,1,189,,72,94,69,7921,1,71,7921,5184,8836,4761),nrow =4)
X<- matrix (c(1,1,1,1,89,72,94,69,7921,5184,8836,4761),nrow =4)
X
library(swirl)
install_from_swirl("Exploratory_Data_Analysis")
rm(list=ls())
swirl()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(lattice)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?split
if (!file.exists("activity"))
{
dir.create("activity")
if (file.exists("activity.zip"))
{
message("Unzipping dataset")
unzip("activity.zip", exdir= "./activity")
}
}
stepData <- read.csv("activity/activity.csv")
stepData$date <- as.Date(stepData$date)
names(stepData) <- c("Steps","Date","Interval")
setwd("E:/Development/R/repData/RepData_PeerAssessment1")
if (!file.exists("activity"))
{
dir.create("activity")
if (file.exists("activity.zip"))
{
message("Unzipping dataset")
unzip("activity.zip", exdir= "./activity")
}
}
stepData <- read.csv("activity/activity.csv")
stepData$date <- as.Date(stepData$date)
names(stepData) <- c("Steps","Date","Interval")
dailySteps <- split(stepData$Steps,stepData$Date)
meanstes <- tapply(stepData$Steps, FUN=mean, na.rm=true)
meanstes <- tapply(stepData$Steps,  FUN=mean, na.rm=true)
str(dailySteps)
meanstes <- tapply(stepData$Steps,  FUN=mean, na.rm=true)
?sapply
sapply(dailySteps,FUN=mean)
a <- sapply(dailySteps,FUN=mean)
a
str(a)
cat(a, sep="\n")
cat(names(a),a, sep="\n")
cat(a, sep="\n",labels=names(a))
cat(a)
cat(names(a))
cbind(names(a),a)
cbind(a)
?cbind
library(xtable)
install.packages("xtable")
install.packages("xtable")
xt <- xtable(a)
library(xtable)
xt <- xtable(a)
a
str(a)
a[1]
a[2]
a[,*]
a[,.]
a[]
View(a)
dailySteps <- split(stepData$Steps,as.string(stepData$Date))
dailySteps <- split(stepData$Steps,as.character(stepData$Date))
a <- sapply(dailySteps,FUN=mean)
View(a)
a
class(a)
dailySteps
a <- lapply(dailySteps,FUN=mean)
a
list.tree(a)
str(list)
str(a)
?list.tree
unlist(a)
print(a)
print(a, row.names= FALSE)
xt <- xtable(unlist(a))
xt <- xtable(unlist(a[1]))
library(reshape)
install.packages("reshape")
library(reshape)
molt <- melt(stepData,id=c("Date"))
molt
str(molt)
amean <- cast(molt,id~variable,mean)
amean <- cast(molt,id~value,mean)
View(molt)
molt <- melt(stepData,id=c("id",Date"))
molt <- melt(stepData,id=c("id",Date"))
?melt
molt <- melt(stepData)
dailySteps <- split(stepData$Steps,stepData$Date)
dailyMean <- sapply(dailySteps,FUN=mean)
dailyMean
meanDF <- data.frame(Date= names(dailyMean), mean = dailyMean)
meanDF
str(meandDF)
str(meanDF)
meanDF <- data.frame(Date= names(dailyMean), mean = dailyMean,row.names = NULL)
meanDF
intervalsplit <- split(stepData$Steps,stepData$Interval)
meanStepsInterval <- sapply(intervalsplit, mean)
?max
intervalsplit <- split(stepData$Steps,stepData$Interval)
meanStepsInterval <- sapply(intervalsplit, mean,na.rm=TRUE)
# Find the maximum
maxIntervalValue <- max(meanStepsInterval, na.rm = TRUE)
maxInterval <- which.max(meanStepsInterval)
View(meanStepsInterval)
intervalMeanDF <- data.frame(Date= names(meanStepsInterval), median = meanStepsInterval,row.names = NULL)
maxInterval <- which.max(intervalMeanDF$median)
maxInterval <- which.max(,intervalMeanDF$median)
maxInterval <- which.max(meanStepsInterval[,2])
str(meanStepsInterval)
str(intervalMeanDF)
maxInterval <- which.max(intervalMeanDF[,2])
maxInterval <- which.max(intervalMeanDF[,meanStepsInterval$mean])
maxInterval <- which.max(intervalMeanDF$mean)
maxInterval <- max(intervalMeanDF$mean)
maxInterval <- max(intervalMeanDF$mean,na.rm = TRUE)
maxInterval <- max(intervalMeanDF$mean,na.rm = FALSe)
maxInterval <- max(intervalMeanDF$mean,na.rm = FALSE)
?which.max
maxInterval <- names(meanStepsInterval)[which.max(meanStepsInterval)]
stepsMerged <- merge (x=stepData,y=stepsByDayMean,by="Interval")
stepsByDayMean <- aggregate(x Steps ~ Interval), FUN=mean,data=stepsByDay)
stepsMerged <- merge (x=stepData,y=stepsByDayMean,by="Interval")
stepsByDayMean <- aggregate(x Steps ~ Interval), FUN=mean,data=stepData)
stepsMerged <- merge (x=stepData,y=stepsByDayMean,by="Interval")
stepsByDayMean <- aggregate(Steps ~ Interval), FUN=mean,data=stepData)
stepsMerged <- merge (x=stepData,y=stepsByDayMean,by="Interval")
stepsByDayMean <- aggregate(Steps ~ Interval), FUN=mean,data=stepData)
stepsByDayMean <- aggregate(Steps ~ Interval, FUN=mean,data=stepData)
stepsMerged <- merge (x=stepData,y=stepsByDayMean,by="Interval")
View(stepsMerged)
stepsByDayMean <- aggregate(Steps ~ Interval, FUN=mean,data=stepData)
stepsMerged <- merge (x=stepData,y=stepsByDayMean,by="Interval")
View(stepsByDayMean)
View(stepsMerged)
stepsByDayMean <- aggregate(Steps ~ Interval, FUN=mean,data=stepData)
stepsMerged <- merge (x=stepData,y=stepsByDayMean,by="Interval")
stepsMerged$NewSteps <- ifelse(is.na(stepsMerged$Steps.x,stepsMerged$Steps.y,stepsMerged$Steps.x))
stepsNew <- stepsMerged[c("Steps"","Date"","Interval")]
stepsByDayMean <- aggregate(Steps ~ Interval, FUN=mean,data=stepData)
stepsMerged <- merge (x=stepData,y=stepsByDayMean,by="Interval")
stepsMerged$NewSteps <- ifelse(is.na(stepsMerged$Steps.x),stepsMerged$Steps.y,stepsMerged$Steps.x)
stepsNew <- stepsMerged[c("Steps","Date"","Interval")]
stepsByDayMean <- aggregate(Steps ~ Interval, FUN=mean,data=stepData)
stepsMerged <- merge (x=stepData,y=stepsByDayMean,by="Interval")
stepsMerged$NewSteps <- ifelse(is.na(stepsMerged$Steps.x),stepsMerged$Steps.y,stepsMerged$Steps.x)
stepsNew <- stepsMerged[c("Steps","Date","Interval")]
str(stespMerged)
str(stepsMerged)
stepsNew <- stepsMerged[c("NewSteps","Date","Interval")]
View(stepsMerged)
stepsByDayMean <- aggregate(Steps ~ Interval, FUN=mean,data=stepData)
stepsMerged <- merge (x=stepData,y=stepsByDayMean,by="Interval")
stepsMerged$NewSteps <- ifelse(is.na(stepsMerged$Steps.x),stepsMerged$Steps.y,stepsMerged$Steps.x)
stepsNew <- stepsMerged[c("NewSteps","Date","Interval")]
histplot <- ggplot(stepsNew,aes(x = NewSteps)) +
ggtitle("Histogram of daily steps") +
xlab("NewSteps") +
geom_histogram(binwidth = 1000)
histplot
library(ggplot2)
stepsByDayMean <- aggregate(Steps ~ Interval, FUN=mean,data=stepData)
stepsMerged <- merge (x=stepData,y=stepsByDayMean,by="Interval")
stepsMerged$NewSteps <- ifelse(is.na(stepsMerged$Steps.x),stepsMerged$Steps.y,stepsMerged$Steps.x)
stepsNew <- stepsMerged[c("NewSteps","Date","Interval")]
histplot <- ggplot(stepsNew,aes(x = NewSteps)) +
ggtitle("Histogram of daily steps") +
xlab("NewSteps") +
geom_histogram(binwidth = 1000)
histplot
hist(stepsNew$NewSteps, xlab="number of steps", main="Total number of steps taken each day",col="blue")
stepsNewByDay <- aggregate(x = stepsNew$NewSteps , by = list(stepsNew$Date), FUN = sum ,na.rm=TRUE)
names(stepsNewByDay) <- c("Date","Steps")
hist(stepsNewByDay$Steps, xlab="number of steps", main="Total number of steps taken each day",col="blue")
histplot <- ggplot(stepsNewByDay,aes(x = Steps)) +
ggtitle("Histogram of daily steps") +
xlab("NewSteps") +
geom_histogram(binwidth = 1000)
histplot
hist(stepsNewByDay$Steps, xlab="number of steps", main="Total number of steps taken each day",col="blue")
gray
